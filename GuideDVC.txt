If you installed DVC via pip and plan to use cloud services as remote storage, you might need to install these optional dependencies: [s3], [azure], [gdrive], [gs], [oss], [ssh]. Alternatively, use [all] to include them all. The command should look like this: pip install "dvc[s3]"

dvc init
git status
git commit -m "Initialize DVC"
================================================
dvc add data/data.xml
git add data/data.xml.dvc data/.gitignore
git commit -m "Add raw data"
dvc remote add -d storage s3://mybucket/dvcstore
git add .dvc/config
git commit -m "Configure remote storage"
dvc push
================================================
dvc add data
dvc remote add --default myremote gdrive://0AIac4JZqHhKmUk9PDA/dvcstore
dvc remote add --default myremote sftp://msh8261@ftp.du5.cesnet.cz/disk_only/archive/VO_vscht_optimcyb/shared/2022_ORL_Skeletons/220615_dataset/NN_training_data/test/
dvc push
===========================================================
dvc stage add -n prepare \
                -p prepare.seed,prepare.split \
                -d src/prepare.py -d data/data.xml \
                -o data/prepared \
                python src/prepare.py data/data.xml

A dvc.yaml file is generated.
=================================================================
dvc stage add -n featurize \
                -p featurize.max_features,featurize.ngrams \
                -d src/featurization.py -d data/prepared \
                -o data/features \
                python src/featurization.py data/prepared data/features

The dvc.yaml file is updated automatically and should include two stages now.
================================================================
dvc dag

To visualize a pipeline.
=================================================
dvc run -n evaluate \
          -d src/evaluate.py -d model.pkl -d data/features \
          -M scores.json \
          --plots-no-cache prc.json \
          --plots-no-cache roc.json \
          python src/evaluate.py model.pkl \
                 data/features scores.json prc.json roc.json

evaluate.py writes the model's ROC-AUC and average precision to scores.json, which in turn is marked as a metrics file with -M.
====================================================================
dvc metrics show

To view tracked metrics.
====================================================
dvc plots modify prc.json -x recall -y precision
dvc plots modify prc.json -x recall -y precision

plot configurations.
====================================================
dvc plots show

To view plots.
=============================================
git add scores.json prc.json roc.json
git commit -a -m "Create evaluation stage"

================================================
dvc repro

To run yaml file to rreproduce all process.
==============================================================
dvc params diff

show how params in the workspace differ .
=====================================================
dvc metrics diff

show how metrics in the workspace differ
============================================
dvc plots diff

compare both precision recall and roc curves with a single command.
======================================================

				EXPRIMENT

====================================================================================
dvc exp run

This runs the command specified in dvc.yaml (python train.py), and creates models, plots, and metrics in the respective directories.
=============================================
dvc exp show

To review the experiment results .
=========================================================
dvc exp run --set-param model.conv_units=24

update experimental parameters in expriment without modifying the files manually.
========================================================================
dvc exp show

compare all of these experiments.
=================================================
dvc exp show --drop 'Created|train|loss'

limit the table to specific columns using the --drop option.
=======================================================
dvc exp branch exp-17dd9 "cnn-256"

Git branch 'cnn-256' has been created from experiment 'exp-17dd9'.
===================================================

				VISUALIZE
==============================================================================
dvc plots show plots/confusion.csv --template confusion \
                                     -x actual -y predicted

==========================================
dvc plots show plots/misclassified.png

=================================================================================

		Autogenerating plots from deep learning code

===================================================================================
from dvclive.keras import DvcLiveCallback
model.fit(
 ...
 callbacks=[DvcLiveCallback()],
 ...)

With these two changes, the model metrics are automatically logged to dvclive.json and plotted in training_metrics/index.html










 












